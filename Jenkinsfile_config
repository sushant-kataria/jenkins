pipeline {
    agent any
    environment {
        GIT_CREDENTIALS = credentials('791e2b80-a8ba-4d19-a472-a72a33d269f4')
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        PATH = "${env.JAVA_HOME}/bin:/var/lib/jenkins/.local/bin:${env.PATH}" // Add pipx bin path
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    git url: 'https://github.com/sushant-kataria/jenkins.git',
                        branch: 'main',
                        credentialsId: '791e2b80-a8ba-4d19-a472-a72a33d269f4'
                }
                echo 'Config code checked out successfully'
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                        if ! command -v ansible-playbook >/dev/null 2>&1; then
                            echo "Ansible not found, installing..."
                            sudo apt update
                            sudo apt install -y software-properties-common
                            sudo add-apt-repository --yes --update ppa:ansible/ansible
                            sudo apt install -y ansible
                        else
                            echo "Ansible already installed"
                        fi
                        if ! command -v pipx >/dev/null 2>&1; then
                            echo "pipx not found, installing..."
                            sudo apt install -y pipx
                        else
                            echo "pipx already installed"
                        fi
                        pipx install ansible-lint || pipx upgrade ansible-lint
                        # Ensure PATH includes pipx binaries
                        echo "export PATH=/var/lib/jenkins/.local/bin:$PATH" >> ~/.bashrc
                        source ~/.bashrc
                    '''
                }
                echo 'Dependencies setup completed for config'
            }
        }
        stage('Unit Tests - Config') {
            steps {
                script {
                    sh '''
                        if [ -f config/apache.yml ]; then
                            pipx run ansible-lint config/apache.yml
                        else
                            echo "ERROR: config/apache.yml not found"
                            exit 1
                        fi
                    '''
                }
                echo 'Unit tests completed for config playbook'
            }
        }
        stage('Integration Tests - Config') {
            steps {
                script {
                    sh '''
                        if [ -f config/apache.yml ]; then
                            ansible-playbook config/apache.yml --check
                        else
                            echo "ERROR: config/apache.yml not found"
                            exit 1
                        fi
                    '''
                }
                echo 'Integration tests (dry-run) completed for config'
            }
        }
        stage('Deploy Config') {
            steps {
                script {
                    sh '''
                        if [ -f config/apache.yml ]; then
                            ansible-playbook config/apache.yml
                        else
                            echo "ERROR: config/apache.yml not found"
                            exit 1
                        fi
                    '''
                }
                echo 'Config deployed successfully'
            }
        }
        stage('Validation Checks - Config') {
            steps {
                script {
                    sh '''
                        if [ -f config/apache.yml ]; then
                            ansible all -m command -a "systemctl is-active apache2" || {
                                echo "ERROR: Apache service is not active"
                                exit 1
                            }
                            ansible all -m command -a "curl -s -o /dev/null -w '%{http_code}' localhost" | grep 200 || {
                                echo "ERROR: Apache is not responding with HTTP 200"
                                exit 1
                            }
                        else
                            echo "ERROR: config/apache.yml not found"
                            exit 1
                        fi
                    '''
                }
                echo 'Validation checks passed for config'
            }
        }
        stage('SonarQube Analysis - Config') {
            tools {
                jdk "jdk17"
            }
            environment {
                scannerHome = tool 'SonarCloud Scanner'
            }
            steps {
                withSonarQubeEnv(installationName: 'SonarCloud') {
                    sh '''
                        if [ -d config ]; then
                            cd config && ${scannerHome}/bin/sonar-scanner -X -Dsonar.qualitygate.wait=true
                        else
                            echo "ERROR: config directory not found"
                            exit 1
                        fi
                    '''
                    echo 'SonarQube analysis and quality gate check completed for config'
                }
            }
        }
    }
    post {
        always {
            echo 'Config pipeline completed'
        }
        failure {
            echo 'Config pipeline failed, check logs for details'
        }
    }
}
